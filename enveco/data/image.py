# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_data.image.ipynb (unless otherwise specified).

__all__ = ['open_geotiff', 'calc_normalized_spectral_index', 'calc_avi', 'calc_savi', 'calc_gci',
           'mask_plot_from_image', 'calc_band_features', 'get_band_feature_cols', 'calc_image_metrics',
           'image_feature_cols']

# Cell
import rasterio as rio
import numpy as np
import matplotlib.pyplot as plt
from typing import List
import pandas as pd

# Cell
def open_geotiff(fn, bands:List[int]=None) -> np.ndarray:
    """Open geotiff image from path, cast it to float and scale it to 0-1 range, optionally with only `bands` input bands."
    Returns numpy array of shape (C,W,H)
    """
    with rio.open(str(fn)) as f:
        data = f.read()
        data = data.astype(np.float32)
        data /= 255.
    if bands is not None: data = data[bands]
    return data

# Cell
def calc_normalized_spectral_index(im:np.ndarray, band_1:int, band_2:int) -> np.ndarray:
    "Calculate normalized spectral index (band_1 - band_2)/(band_1-band_2). Can be used with NDVI and such simple indices"
    return (im[band_1] - im[band_2]) / (im[band_1] + im[band_2])

def calc_avi(im:np.ndarray, nir:int, red:int) -> np.ndarray:
    "Calculate AVI (nir *(1-red) * (nir-red))"
    return im[nir] * (1 - im[red]) * (nir - red)

def calc_savi(im:np.ndarray, nir:int, red:int, l:float=0.5) -> np.ndarray:
    "Calculate Soil Adjusted Vegetation Index ((nir-red)/(nir+red+l)) * (1+l). Default uses Landsat coefficient L"
    return ((im[nir] - im[red]) / (im[nir] + im[red] + l)) * (1 + l)

def calc_gci(im:np.ndarray, nir:int, green:int) -> np.ndarray:
    "Calculate Green Clorophyll Index nir/green - 1"
    return im[nir] / im[green] - 1

# Cell

def mask_plot_from_image(data:np.ndarray, radius:float=31) -> np.ndarray:
    "Select only data from within field plot of radius (radius-1) pixels"
    center = (int(data.shape[1]/2), int(data.shape[2]/2))
    Y, X = np.ogrid[:data.shape[1], :data.shape[2]]
    dist_from_center = np.sqrt((X-center[0])**2 + (Y-center[1])**2)
    mask = dist_from_center <= radius
    data[:,~mask] = np.nan
    return data

# Cell

def calc_band_features(image:np.ndarray, band_idx:int=0):
    "Get basic features from a single input band: Max, min, mean, std and coefficient of variation"
    band_max = np.nanmax(image[band_idx])
    band_min = np.nanmin(image[band_idx])
    band_mean =  np.nanmean(image[band_idx])
    band_std = np.nanstd(image[band_idx])
    band_cv = band_std / band_mean
    return [band_max, band_min, band_mean, band_std]

def get_band_feature_cols(band_name):
    return [f'{band_name}_max', f'{band_name}_min', f'{band_name}_mean',
            f'{band_name}_std', f'{band_name}_cv']

# Cell

def calc_image_metrics(image:np.ndarray) -> list:
    "Calculate metrics from NIR-red-green -images"

    # Max, mean, std and coefficient of variation
    nir_max = np.nanmax(image[0])
    nir_min = np.nanmin(image[0])
    nir_mean = np.nanmean(image[0])
    nir_std = np.nanstd(image[0])
    nir_cv = nir_std / nir_mean

    red_max = np.nanmax(image[1])
    red_min = np.nanmin(image[1])
    red_mean = np.nanmean(image[1])
    red_std = np.nanstd(image[1])
    red_cv = red_std / red_mean

    green_max = np.nanmax(image[2])
    green_min = np.nanmin(image[2])
    green_mean = np.nanmean(image[2])
    green_std = np.nanstd(image[2])
    green_cv = green_std / green_mean

    # spectral indices
    # NDVI
    ndvi = calc_normalized_spectral_index(image, 0, 1)
    ndvi_max = np.nanmax(ndvi)
    ndvi_min = np.nanmin(ndvi)
    ndvi_mean = np.nanmean(ndvi)
    ndvi_std = np.nanstd(ndvi)
    ndvi_cv = ndvi_std / ndvi_mean

    # GNDVI
    gndvi = calc_normalized_spectral_index(image, 0, 2)
    gndvi_max = np.nanmax(gndvi)
    gndvi_min = np.nanmin(gndvi)
    gndvi_mean = np.nanmean(gndvi)
    gndvi_std = np.nanstd(gndvi)
    gndvi_cv = gndvi_std / gndvi_mean

    # AVI
    avi = calc_avi(image, 0, 1)
    avi_max = np.nanmax(avi)
    avi_min = np.nanmin(avi)
    avi_mean = np.nanmean(avi)
    avi_std = np.nanstd(avi)
    avi_cv = avi_std / avi_mean

    # SAVI
    savi = calc_savi(image, 0, 1)
    savi_max = np.nanmax(savi)
    savi_min = np.nanmin(savi)
    savi_mean = np.nanmean(savi)
    savi_std = np.nanstd(savi)
    savi_cv = savi_std/savi_mean

    # GCI
    gci = calc_gci(image, 0, 2)
    gci_max = np.nanmax(gci)
    gci_min = np.nanmin(gci)
    gci_mean = np.nanmean(gci)
    gci_std = np.nanstd(gci)
    gci_cv = gci_std/gci_mean

    return [nir_max, nir_min, nir_mean, nir_std, nir_cv,
            red_max, red_min, red_mean, red_std, red_cv,
            green_max, green_min, green_mean, green_std, green_cv,
            ndvi_max, ndvi_min, ndvi_mean, ndvi_std, ndvi_cv,
            gndvi_max, gndvi_min, gndvi_mean, gndvi_std, gndvi_cv,
            avi_max, avi_min, avi_mean, avi_std, avi_cv,
            savi_max, savi_min, savi_mean, savi_std, savi_cv,
            gci_max, gci_min, gci_mean, gci_std, gci_cv]

image_feature_cols = ['nir_max', 'nir_min', 'nir_mean', 'nir_std', 'nir_cv',
                      'red_max', 'red_min', 'red_mean', 'red_std', 'red_cv',
                      'green_max', 'green_min', 'green_mean', 'green_std', 'green_cv',
                      'ndvi_max', 'ndvi_min', 'ndvi_mean', 'ndvi_std', 'ndvi_cv',
                      'gndvi_max', 'gndvi_min', 'gndvi_mean', 'gndvi_std', 'gndvi_cv',
                      'avi_max', 'avi_min', 'avi_mean', 'avi_std', 'avi_cv',
                      'savi_max', 'savi_min', 'savi_mean', 'savi_std', 'savi_cv',
                      'gci_max', 'gci_min', 'gci_mean', 'gci_std', 'gci_cv']